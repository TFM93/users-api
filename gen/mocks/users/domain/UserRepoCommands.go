// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "users/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserRepoCommands is an autogenerated mock type for the UserRepoCommands type
type UserRepoCommands struct {
	mock.Mock
}

type UserRepoCommands_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepoCommands) EXPECT() *UserRepoCommands_Expecter {
	return &UserRepoCommands_Expecter{mock: &_m.Mock}
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *UserRepoCommands) DeleteUser(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepoCommands_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserRepoCommands_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserRepoCommands_Expecter) DeleteUser(ctx interface{}, userID interface{}) *UserRepoCommands_DeleteUser_Call {
	return &UserRepoCommands_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, userID)}
}

func (_c *UserRepoCommands_DeleteUser_Call) Run(run func(ctx context.Context, userID string)) *UserRepoCommands_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepoCommands_DeleteUser_Call) Return(_a0 error) *UserRepoCommands_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepoCommands_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *UserRepoCommands_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUser provides a mock function with given fields: ctx, user
func (_m *UserRepoCommands) SaveUser(ctx context.Context, user *domain.User) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepoCommands_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type UserRepoCommands_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.User
func (_e *UserRepoCommands_Expecter) SaveUser(ctx interface{}, user interface{}) *UserRepoCommands_SaveUser_Call {
	return &UserRepoCommands_SaveUser_Call{Call: _e.mock.On("SaveUser", ctx, user)}
}

func (_c *UserRepoCommands_SaveUser_Call) Run(run func(ctx context.Context, user *domain.User)) *UserRepoCommands_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *UserRepoCommands_SaveUser_Call) Return(_a0 string, _a1 error) *UserRepoCommands_SaveUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepoCommands_SaveUser_Call) RunAndReturn(run func(context.Context, *domain.User) (string, error)) *UserRepoCommands_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *UserRepoCommands) UpdateUser(ctx context.Context, user *domain.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepoCommands_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserRepoCommands_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.User
func (_e *UserRepoCommands_Expecter) UpdateUser(ctx interface{}, user interface{}) *UserRepoCommands_UpdateUser_Call {
	return &UserRepoCommands_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user)}
}

func (_c *UserRepoCommands_UpdateUser_Call) Run(run func(ctx context.Context, user *domain.User)) *UserRepoCommands_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *UserRepoCommands_UpdateUser_Call) Return(_a0 error) *UserRepoCommands_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepoCommands_UpdateUser_Call) RunAndReturn(run func(context.Context, *domain.User) error) *UserRepoCommands_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepoCommands creates a new instance of UserRepoCommands. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepoCommands(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepoCommands {
	mock := &UserRepoCommands{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
