// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "users/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// OutboxRepoCommands is an autogenerated mock type for the OutboxRepoCommands type
type OutboxRepoCommands struct {
	mock.Mock
}

type OutboxRepoCommands_Expecter struct {
	mock *mock.Mock
}

func (_m *OutboxRepoCommands) EXPECT() *OutboxRepoCommands_Expecter {
	return &OutboxRepoCommands_Expecter{mock: &_m.Mock}
}

// AddEvent provides a mock function with given fields: ctx, event
func (_m *OutboxRepoCommands) AddEvent(ctx context.Context, event *domain.Event) (string, error) {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for AddEvent")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Event) (string, error)); ok {
		return rf(ctx, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Event) string); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OutboxRepoCommands_AddEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEvent'
type OutboxRepoCommands_AddEvent_Call struct {
	*mock.Call
}

// AddEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event *domain.Event
func (_e *OutboxRepoCommands_Expecter) AddEvent(ctx interface{}, event interface{}) *OutboxRepoCommands_AddEvent_Call {
	return &OutboxRepoCommands_AddEvent_Call{Call: _e.mock.On("AddEvent", ctx, event)}
}

func (_c *OutboxRepoCommands_AddEvent_Call) Run(run func(ctx context.Context, event *domain.Event)) *OutboxRepoCommands_AddEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Event))
	})
	return _c
}

func (_c *OutboxRepoCommands_AddEvent_Call) Return(_a0 string, _a1 error) *OutboxRepoCommands_AddEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OutboxRepoCommands_AddEvent_Call) RunAndReturn(run func(context.Context, *domain.Event) (string, error)) *OutboxRepoCommands_AddEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnprocessed provides a mock function with given fields: ctx, limit
func (_m *OutboxRepoCommands) GetUnprocessed(ctx context.Context, limit int32) ([]*domain.Event, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetUnprocessed")
	}

	var r0 []*domain.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]*domain.Event, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []*domain.Event); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OutboxRepoCommands_GetUnprocessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnprocessed'
type OutboxRepoCommands_GetUnprocessed_Call struct {
	*mock.Call
}

// GetUnprocessed is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int32
func (_e *OutboxRepoCommands_Expecter) GetUnprocessed(ctx interface{}, limit interface{}) *OutboxRepoCommands_GetUnprocessed_Call {
	return &OutboxRepoCommands_GetUnprocessed_Call{Call: _e.mock.On("GetUnprocessed", ctx, limit)}
}

func (_c *OutboxRepoCommands_GetUnprocessed_Call) Run(run func(ctx context.Context, limit int32)) *OutboxRepoCommands_GetUnprocessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *OutboxRepoCommands_GetUnprocessed_Call) Return(_a0 []*domain.Event, _a1 error) *OutboxRepoCommands_GetUnprocessed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OutboxRepoCommands_GetUnprocessed_Call) RunAndReturn(run func(context.Context, int32) ([]*domain.Event, error)) *OutboxRepoCommands_GetUnprocessed_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsProcessed provides a mock function with given fields: ctx, id
func (_m *OutboxRepoCommands) MarkAsProcessed(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsProcessed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OutboxRepoCommands_MarkAsProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsProcessed'
type OutboxRepoCommands_MarkAsProcessed_Call struct {
	*mock.Call
}

// MarkAsProcessed is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *OutboxRepoCommands_Expecter) MarkAsProcessed(ctx interface{}, id interface{}) *OutboxRepoCommands_MarkAsProcessed_Call {
	return &OutboxRepoCommands_MarkAsProcessed_Call{Call: _e.mock.On("MarkAsProcessed", ctx, id)}
}

func (_c *OutboxRepoCommands_MarkAsProcessed_Call) Run(run func(ctx context.Context, id string)) *OutboxRepoCommands_MarkAsProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OutboxRepoCommands_MarkAsProcessed_Call) Return(_a0 error) *OutboxRepoCommands_MarkAsProcessed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutboxRepoCommands_MarkAsProcessed_Call) RunAndReturn(run func(context.Context, string) error) *OutboxRepoCommands_MarkAsProcessed_Call {
	_c.Call.Return(run)
	return _c
}

// NewOutboxRepoCommands creates a new instance of OutboxRepoCommands. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOutboxRepoCommands(t interface {
	mock.TestingT
	Cleanup(func())
}) *OutboxRepoCommands {
	mock := &OutboxRepoCommands{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
