// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "users/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// UserRepoQueries is an autogenerated mock type for the UserRepoQueries type
type UserRepoQueries struct {
	mock.Mock
}

type UserRepoQueries_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepoQueries) EXPECT() *UserRepoQueries_Expecter {
	return &UserRepoQueries_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: ctx, userID
func (_m *UserRepoQueries) GetUser(ctx context.Context, userID string) (*domain.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepoQueries_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserRepoQueries_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserRepoQueries_Expecter) GetUser(ctx interface{}, userID interface{}) *UserRepoQueries_GetUser_Call {
	return &UserRepoQueries_GetUser_Call{Call: _e.mock.On("GetUser", ctx, userID)}
}

func (_c *UserRepoQueries_GetUser_Call) Run(run func(ctx context.Context, userID string)) *UserRepoQueries_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepoQueries_GetUser_Call) Return(_a0 *domain.User, _a1 error) *UserRepoQueries_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepoQueries_GetUser_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *UserRepoQueries_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, cursorUserID, cursorUpdatedAt, limit, filters
func (_m *UserRepoQueries) ListUsers(ctx context.Context, cursorUserID string, cursorUpdatedAt *time.Time, limit int32, filters domain.UserSearchFilters) ([]*domain.User, error) {
	ret := _m.Called(ctx, cursorUserID, cursorUpdatedAt, limit, filters)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []*domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *time.Time, int32, domain.UserSearchFilters) ([]*domain.User, error)); ok {
		return rf(ctx, cursorUserID, cursorUpdatedAt, limit, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *time.Time, int32, domain.UserSearchFilters) []*domain.User); ok {
		r0 = rf(ctx, cursorUserID, cursorUpdatedAt, limit, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *time.Time, int32, domain.UserSearchFilters) error); ok {
		r1 = rf(ctx, cursorUserID, cursorUpdatedAt, limit, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepoQueries_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type UserRepoQueries_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - cursorUserID string
//   - cursorUpdatedAt *time.Time
//   - limit int32
//   - filters domain.UserSearchFilters
func (_e *UserRepoQueries_Expecter) ListUsers(ctx interface{}, cursorUserID interface{}, cursorUpdatedAt interface{}, limit interface{}, filters interface{}) *UserRepoQueries_ListUsers_Call {
	return &UserRepoQueries_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, cursorUserID, cursorUpdatedAt, limit, filters)}
}

func (_c *UserRepoQueries_ListUsers_Call) Run(run func(ctx context.Context, cursorUserID string, cursorUpdatedAt *time.Time, limit int32, filters domain.UserSearchFilters)) *UserRepoQueries_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*time.Time), args[3].(int32), args[4].(domain.UserSearchFilters))
	})
	return _c
}

func (_c *UserRepoQueries_ListUsers_Call) Return(_a0 []*domain.User, _a1 error) *UserRepoQueries_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepoQueries_ListUsers_Call) RunAndReturn(run func(context.Context, string, *time.Time, int32, domain.UserSearchFilters) ([]*domain.User, error)) *UserRepoQueries_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepoQueries creates a new instance of UserRepoQueries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepoQueries(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepoQueries {
	mock := &UserRepoQueries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
