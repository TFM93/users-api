// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "users/internal/domain"

	mock "github.com/stretchr/testify/mock"

	user "users/internal/app/user"
)

// UserServiceQueries is an autogenerated mock type for the UserServiceQueries type
type UserServiceQueries struct {
	mock.Mock
}

type UserServiceQueries_Expecter struct {
	mock *mock.Mock
}

func (_m *UserServiceQueries) EXPECT() *UserServiceQueries_Expecter {
	return &UserServiceQueries_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: ctx, userID
func (_m *UserServiceQueries) GetUser(ctx context.Context, userID string) (*domain.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceQueries_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserServiceQueries_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserServiceQueries_Expecter) GetUser(ctx interface{}, userID interface{}) *UserServiceQueries_GetUser_Call {
	return &UserServiceQueries_GetUser_Call{Call: _e.mock.On("GetUser", ctx, userID)}
}

func (_c *UserServiceQueries_GetUser_Call) Run(run func(ctx context.Context, userID string)) *UserServiceQueries_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserServiceQueries_GetUser_Call) Return(_a0 *domain.User, err error) *UserServiceQueries_GetUser_Call {
	_c.Call.Return(_a0, err)
	return _c
}

func (_c *UserServiceQueries_GetUser_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *UserServiceQueries_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, req
func (_m *UserServiceQueries) ListUsers(ctx context.Context, req user.ListUsersRequest) ([]*domain.User, string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []*domain.User
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, user.ListUsersRequest) ([]*domain.User, string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.ListUsersRequest) []*domain.User); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.ListUsersRequest) string); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, user.ListUsersRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserServiceQueries_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type UserServiceQueries_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - req user.ListUsersRequest
func (_e *UserServiceQueries_Expecter) ListUsers(ctx interface{}, req interface{}) *UserServiceQueries_ListUsers_Call {
	return &UserServiceQueries_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, req)}
}

func (_c *UserServiceQueries_ListUsers_Call) Run(run func(ctx context.Context, req user.ListUsersRequest)) *UserServiceQueries_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user.ListUsersRequest))
	})
	return _c
}

func (_c *UserServiceQueries_ListUsers_Call) Return(users []*domain.User, nextCursor string, err error) *UserServiceQueries_ListUsers_Call {
	_c.Call.Return(users, nextCursor, err)
	return _c
}

func (_c *UserServiceQueries_ListUsers_Call) RunAndReturn(run func(context.Context, user.ListUsersRequest) ([]*domain.User, string, error)) *UserServiceQueries_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserServiceQueries creates a new instance of UserServiceQueries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceQueries(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceQueries {
	mock := &UserServiceQueries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
