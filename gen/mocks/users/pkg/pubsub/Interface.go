// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	pubsub "users/pkg/pubsub"

	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

type Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *Interface) EXPECT() *Interface_Expecter {
	return &Interface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Interface) Close() {
	_m.Called()
}

// Interface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Interface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Interface_Expecter) Close() *Interface_Close_Call {
	return &Interface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Interface_Close_Call) Run(run func()) *Interface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Interface_Close_Call) Return() *Interface_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Interface_Close_Call) RunAndReturn(run func()) *Interface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// IsEnabled provides a mock function with given fields:
func (_m *Interface) IsEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Interface_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type Interface_IsEnabled_Call struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
func (_e *Interface_Expecter) IsEnabled() *Interface_IsEnabled_Call {
	return &Interface_IsEnabled_Call{Call: _e.mock.On("IsEnabled")}
}

func (_c *Interface_IsEnabled_Call) Run(run func()) *Interface_IsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Interface_IsEnabled_Call) Return(_a0 bool) *Interface_IsEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_IsEnabled_Call) RunAndReturn(run func() bool) *Interface_IsEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *Interface) Ping(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Interface_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Interface_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Interface_Expecter) Ping(ctx interface{}) *Interface_Ping_Call {
	return &Interface_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *Interface_Ping_Call) Run(run func(ctx context.Context)) *Interface_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Interface_Ping_Call) Return(_a0 bool) *Interface_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_Ping_Call) RunAndReturn(run func(context.Context) bool) *Interface_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Topic provides a mock function with given fields: id
func (_m *Interface) Topic(id string) pubsub.Topic {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Topic")
	}

	var r0 pubsub.Topic
	if rf, ok := ret.Get(0).(func(string) pubsub.Topic); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pubsub.Topic)
		}
	}

	return r0
}

// Interface_Topic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Topic'
type Interface_Topic_Call struct {
	*mock.Call
}

// Topic is a helper method to define mock.On call
//   - id string
func (_e *Interface_Expecter) Topic(id interface{}) *Interface_Topic_Call {
	return &Interface_Topic_Call{Call: _e.mock.On("Topic", id)}
}

func (_c *Interface_Topic_Call) Run(run func(id string)) *Interface_Topic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Interface_Topic_Call) Return(_a0 pubsub.Topic) *Interface_Topic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_Topic_Call) RunAndReturn(run func(string) pubsub.Topic) *Interface_Topic_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
