// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

type Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *Interface) EXPECT() *Interface_Expecter {
	return &Interface_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: message, args
func (_m *Interface) Debug(message interface{}, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Interface_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type Interface_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - message interface{}
//   - args ...interface{}
func (_e *Interface_Expecter) Debug(message interface{}, args ...interface{}) *Interface_Debug_Call {
	return &Interface_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{message}, args...)...)}
}

func (_c *Interface_Debug_Call) Run(run func(message interface{}, args ...interface{})) *Interface_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Interface_Debug_Call) Return() *Interface_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *Interface_Debug_Call) RunAndReturn(run func(interface{}, ...interface{})) *Interface_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: message, args
func (_m *Interface) Error(message interface{}, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Interface_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Interface_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - message interface{}
//   - args ...interface{}
func (_e *Interface_Expecter) Error(message interface{}, args ...interface{}) *Interface_Error_Call {
	return &Interface_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{message}, args...)...)}
}

func (_c *Interface_Error_Call) Run(run func(message interface{}, args ...interface{})) *Interface_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Interface_Error_Call) Return() *Interface_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *Interface_Error_Call) RunAndReturn(run func(interface{}, ...interface{})) *Interface_Error_Call {
	_c.Call.Return(run)
	return _c
}

// GinLoggerFn provides a mock function with given fields:
func (_m *Interface) GinLoggerFn() gin.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GinLoggerFn")
	}

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func() gin.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// Interface_GinLoggerFn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GinLoggerFn'
type Interface_GinLoggerFn_Call struct {
	*mock.Call
}

// GinLoggerFn is a helper method to define mock.On call
func (_e *Interface_Expecter) GinLoggerFn() *Interface_GinLoggerFn_Call {
	return &Interface_GinLoggerFn_Call{Call: _e.mock.On("GinLoggerFn")}
}

func (_c *Interface_GinLoggerFn_Call) Run(run func()) *Interface_GinLoggerFn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Interface_GinLoggerFn_Call) Return(_a0 gin.HandlerFunc) *Interface_GinLoggerFn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_GinLoggerFn_Call) RunAndReturn(run func() gin.HandlerFunc) *Interface_GinLoggerFn_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: message, args
func (_m *Interface) Info(message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Interface_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Interface_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - message string
//   - args ...interface{}
func (_e *Interface_Expecter) Info(message interface{}, args ...interface{}) *Interface_Info_Call {
	return &Interface_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{message}, args...)...)}
}

func (_c *Interface_Info_Call) Run(run func(message string, args ...interface{})) *Interface_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Interface_Info_Call) Return() *Interface_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *Interface_Info_Call) RunAndReturn(run func(string, ...interface{})) *Interface_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: message, args
func (_m *Interface) Warn(message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Interface_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type Interface_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - message string
//   - args ...interface{}
func (_e *Interface_Expecter) Warn(message interface{}, args ...interface{}) *Interface_Warn_Call {
	return &Interface_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{message}, args...)...)}
}

func (_c *Interface_Warn_Call) Run(run func(message string, args ...interface{})) *Interface_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Interface_Warn_Call) Return() *Interface_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *Interface_Warn_Call) RunAndReturn(run func(string, ...interface{})) *Interface_Warn_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
